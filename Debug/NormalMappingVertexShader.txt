#version 330

layout (location = 0) in vec3 vertex_position;
layout (location = 1) in vec3 vertex_normal;
layout (location = 2) in vec2 vertex_texCoords;
layout (location = 3) in vec3 vertex_tangent;
layout (location = 4) in vec3 vertex_bitangent;

out vec3 FragPos;
out vec2 TexCoords;
out vec3 TangentLightPos;
out vec3 TangentViewPos;
out vec3 TangentFragPos;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

uniform vec3 lightPos;
uniform vec3 viewPos;

void main(){  
	//Normal = mat3(transpose(inverse(model)))*vertex_normal;
	FragPos = vec3(model*vec4(vertex_position,1.0));
	TexCoords = vertex_texCoords;

	mat3 normalMatrix = transpose(inverse(mat3(model)));
	vec3 T = normalize(normalMatrix * vertex_tangent);
	vec3 N = normalize(normalMatrix * vertex_normal);
	T = normalize(T - dot(T,N) * N);
	vec3 B = cross(N,T);

	mat3 TBN = transpose(mat3(T,B,N));
    TangentLightPos = TBN * lightPos;
    TangentViewPos = TBN * viewPos;
    TangentFragPos = TBN * FragPos;

	gl_Position = proj * view * model * vec4(vertex_position,1.0);
}

  